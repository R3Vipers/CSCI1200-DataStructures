if(cont == "s") exit(1);
        for (string& word : good_words) {
        for (int r = 0; r < board.size(); r++) {
            for (int c = 0; c < board[0].size(); c++) {
                    //cout<<board[r][c]<<endl;
                    if(board[r][c] == '&' && !exist(board, word)) {
                        cout<<word<<endl;
                        //vector<vector<char>> newBoard = board;
                        int len = word.length();

                        //straights

                        if (c + len <= board[0].size()) {
                            // Try adding the word horizontally right
                            for (int i = 0; i < len; i++) {
                                board[r][c + i] = word[i];
                            }
                            generateBoards(result, board, good_words, bad_words);
                            for (int i = len; i == 0; i--) {
                                board[r][c + i] = '&';
                            }
                        }

                        if (-1 <= c - len) {
                            // Try adding the word horizontally left
                            for (int i = 0; i < len; i++) {
                                board[r][c - i] = word[i];
                            }
                            generateBoards(result, board, good_words, bad_words);
                            for (int i = len; i == 0; i--) {
                                board[r][c - i] = '&';
                            }
                        }

                        if (r + len <= board.size()) {
                            // Try adding the word vertically down
                            //if (added) continue;
                            for (int i = 0; i < len; i++) {
                                board[r + i][c] = word[i];
                            }
                            generateBoards(result, board, good_words, bad_words);
                            for (int i = len; i == 0; i--) {
                                board[r + i][c] = '&';
                            }
                        }

                        if (-1 <= r - len) {
                            // Try adding the word vertically up
                            for (int i = 0; i < len; i++) {
                                board[r - i][c] = word[i];
                            }
                            generateBoards(result, board, good_words, bad_words);
                            for (int i = len; i == 0; i--) {
                                board[r - i][c] = '&';
                            }
                        }

                        //diagonals

                        if (-1 <= c - len && -1 <= r - len) {
                            // Try adding the word diagonally left up
                            for (int i = 0; i < len; i++) {
                                board[r - i][c - i] = word[i];
                            }
                            generateBoards(result, board, good_words, bad_words);
                            for (int i = len; i == 0; i--) {
                                board[r - i][c - i] = '&';
                            }
                        }

                        if (-1 <= c - len && r + len <= board.size()) {
                            // Try adding the word diagonally left down
                            for (int i = 0; i < len; i++) {
                                board[r + i][c - i] = word[i];
                            }
                            generateBoards(result, board, good_words, bad_words);
                            for (int i = len; i == 0; i--) {
                                board[r + i][c - i] = '&';
                            }
                        }

                        if (c + len <= board[0].size() && -1 <= r - len) {
                            // Try adding the word diagonally right up
                            //if (added) continue;
                            for (int i = 0; i < len; i++) {
                                board[r - i][c + i] = word[i];
                            }
                            generateBoards(result, board, good_words, bad_words);
                            for (int i = len; i == 0; i--) {
                                board[r - i][c + i] = '&';
                            }
                        }

                        if (c + len <= board[0].size() && r + len <= board.size()) {
                            // Try adding the word diagonally right down
                            for (int i = 0; i < len; i++) {
                                board[r + i][c + i] = word[i];
                            }
                            generateBoards(result, board, good_words, bad_words);
                            for (int i = len; i == 0; i--) {
                                board[r + i][c + i] = '&';
                            }
                        }
                    }
                }
            }
        }




-------------------------------------


string cont;
        cout<<"continue: ";
        cin>> cont;
        if(cont == "y") {
            for (const vector<char>& row : board) {
                for(const char& letter : row) cout << letter;
                cout<<endl;
            }
            cout << "-------" << endl;
        }
        if(cont == "s") exit(1);
        for (string& word : good_words) {
            for (int r = 0; r < board.size(); r++) {
                for (int c = 0; c < board[0].size(); c++) {
                    cout<<word<<endl;
                    int len = word.length();

                    //straights

                    if (c + len <= board[0].size()) {
                        // Try adding the word horizontally right
                        for (int i = 0; i < len; i++) {
                            board[r][c + i] = word[i];
                        }
                        //generateBoards(result, board, good_words, bad_words);
                        cout<<"r continue: ";
                        cin>> cont;
                        if(cont == "y") {
                            for (const vector<char>& row : board) {
                                for(const char& letter : row) cout << letter;
                                cout<<endl;
                            }
                            cout << "-------" << endl;
                        }

                        for (int x = len-1; x == 0; x--) {
                            cout<<board[r][c + x]<<endl;
                            board[r][c + x] = '&';
                        }
                    }

                    if (-1 <= c - len) {
                        // Try adding the word horizontally left
                        for (int i = 0; i < len; i++) {
                            board[r][c - i] = word[i];
                        }
                        //generateBoards(result, board, good_words, bad_words);

                        cout<<"l continue: ";
                        cin>> cont;
                        if(cont == "y") {
                            for (const vector<char>& row : board) {
                                for(const char& letter : row) cout << letter;
                                cout<<endl;
                            }
                            cout << "-------" << endl;
                        }


                        for (int i = len; i == 0; i--) {
                            board[r][c - i] = '&';
                        }
                    }

                    if (r + len <= board.size()) {
                        // Try adding the word vertically down
                        //if (added) continue;
                        for (int i = 0; i < len; i++) {
                            board[r + i][c] = word[i];
                        }
                        //generateBoards(result, board, good_words, bad_words);

                        cout<<"d continue: ";
                        cin>> cont;
                        if(cont == "y") {
                            for (const vector<char>& row : board) {
                                for(const char& letter : row) cout << letter;
                                cout<<endl;
                            }
                            cout << "-------" << endl;
                        }

                        for (int i = len; i == 0; i--) {
                            board[r + i][c] = '&';
                        }
                    }



                    if (-1 <= r - len) {
                        // Try adding the word vertically up
                        for (int i = 0; i < len; i++) {
                            board[r - i][c] = word[i];
                        }
                        //generateBoards(result, board, good_words, bad_words);

                        cout<<"u continue: ";
                        cin>> cont;
                        if(cont == "y") {
                            for (const vector<char>& row : board) {
                                for(const char& letter : row) cout << letter;
                                cout<<endl;
                            }
                            cout << "-------" << endl;
                        }

                        for (int i = len; i == 0; i--) {
                            board[r - i][c] = '&';
                        }
                    }



                    //diagonals

                    if (-1 <= c - len && -1 <= r - len) {
                        // Try adding the word diagonally left up
                        for (int i = 0; i < len; i++) {
                            board[r - i][c - i] = word[i];
                        }
                        generateBoards(result, board, good_words, bad_words);
                        for (int i = len; i == 0; i--) {
                            board[r - i][c - i] = '&';
                        }
                    }

                    if (-1 <= c - len && r + len <= board.size()) {
                        // Try adding the word diagonally left down
                        for (int i = 0; i < len; i++) {
                            board[r + i][c - i] = word[i];
                        }
                        generateBoards(result, board, good_words, bad_words);
                        for (int i = len; i == 0; i--) {
                            board[r + i][c - i] = '&';
                        }
                    }

                    if (c + len <= board[0].size() && -1 <= r - len) {
                        // Try adding the word diagonally right up
                        //if (added) continue;
                        for (int i = 0; i < len; i++) {
                            board[r - i][c + i] = word[i];
                        }
                        generateBoards(result, board, good_words, bad_words);
                        for (int i = len; i == 0; i--) {
                            board[r - i][c + i] = '&';
                        }
                    }

                    if (c + len <= board[0].size() && r + len <= board.size()) {
                        // Try adding the word diagonally right down
                        for (int i = 0; i < len; i++) {
                            board[r + i][c + i] = word[i];
                        }
                        generateBoards(result, board, good_words, bad_words);
                        for (int i = len; i == 0; i--) {
                            board[r + i][c + i] = '&';
                        }
                    }
                }
            }
        }